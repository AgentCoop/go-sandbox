// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// ChatClient is the client API for Chat service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChatClient interface {
	CreateRoom(ctx context.Context, in *Room_CreateRequest, opts ...grpc.CallOption) (*Room_CreateResponse, error)
}

type chatClient struct {
	cc grpc.ClientConnInterface
}

func NewChatClient(cc grpc.ClientConnInterface) ChatClient {
	return &chatClient{cc}
}

var chatCreateRoomStreamDesc = &grpc.StreamDesc{
	StreamName: "CreateRoom",
}

func (c *chatClient) CreateRoom(ctx context.Context, in *Room_CreateRequest, opts ...grpc.CallOption) (*Room_CreateResponse, error) {
	out := new(Room_CreateResponse)
	err := c.cc.Invoke(ctx, "/chat.Chat/CreateRoom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChatService is the service API for Chat service.
// Fields should be assigned to their respective handler implementations only before
// RegisterChatService is called.  Any unassigned fields will result in the
// handler for that method returning an Unimplemented error.
type ChatService struct {
	CreateRoom func(context.Context, *Room_CreateRequest) (*Room_CreateResponse, error)
}

func (s *ChatService) createRoom(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Room_CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return s.CreateRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     s,
		FullMethod: "/chat.Chat/CreateRoom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.CreateRoom(ctx, req.(*Room_CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RegisterChatService registers a service implementation with a gRPC server.
func RegisterChatService(s grpc.ServiceRegistrar, srv *ChatService) {
	srvCopy := *srv
	if srvCopy.CreateRoom == nil {
		srvCopy.CreateRoom = func(context.Context, *Room_CreateRequest) (*Room_CreateResponse, error) {
			return nil, status.Errorf(codes.Unimplemented, "method CreateRoom not implemented")
		}
	}
	sd := grpc.ServiceDesc{
		ServiceName: "chat.Chat",
		Methods: []grpc.MethodDesc{
			{
				MethodName: "CreateRoom",
				Handler:    srvCopy.createRoom,
			},
		},
		Streams:  []grpc.StreamDesc{},
		Metadata: "service/chat.proto",
	}

	s.RegisterService(&sd, nil)
}
